@inject IJSRuntime JS
@implements IAsyncDisposable

<DevExtremeResources ResourcesLoaded="@(() => ResourcesLoaded = true)" />

@if(ResourcesLoaded) {
    <div @ref=@Map></div>
}

@code {
    bool ResourcesLoaded { get; set; }
    bool ClientInitializationInProgress { get; set; }

    ElementReference Map { get; set; }

    IJSObjectReference ClientModule { get; set; }
    IJSObjectReference ClientMap { get; set; }

    protected sealed override async Task OnAfterRenderAsync(bool firstRender) {
        if(ResourcesLoaded && ClientMap == null && !ClientInitializationInProgress) {
            ClientInitializationInProgress = true;
            ClientModule = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/JSWidgetsRCL/DevExtremeComponents/DevExtremeMap.razor.js");
            ClientMap = await ClientModule.InvokeAsync<IJSObjectReference>("initializeMap", Map);
            ClientInitializationInProgress = false;
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync() {
        if(ClientMap != null)
            await ClientMap.DisposeAsync();
        if(ClientModule != null)
            await ClientModule.DisposeAsync();
    }
}
