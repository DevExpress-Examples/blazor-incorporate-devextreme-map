@inject IJSRuntime JS
@implements IAsyncDisposable

<DevExtremeResources ResourcesLoaded="@(() => ResourcesLoaded = true)" />

@if(ResourcesLoaded) {
    <div @ref=@Toolbar></div>
    <div @ref=@HtmlEditor ondxbl:htmleditor-htmlchanged="@OnHtmlChanged"></div>
}

@code {
    bool ResourcesLoaded { get; set; }
    bool ClientInitializationInProgress { get; set; }

    ElementReference Toolbar { get; set; }
    ElementReference HtmlEditor { get; set; }

    IJSObjectReference ClientModule { get; set; }
    IJSObjectReference ClientHtmlEditor { get; set; }

    [Parameter]
    public string HtmlString { get; set; }
    [Parameter]
    public EventCallback<string> HtmlStringChanged { get; set; }

    protected sealed override async Task OnAfterRenderAsync(bool firstRender) {
        if(ResourcesLoaded && ClientHtmlEditor == null && !ClientInitializationInProgress) {
            ClientInitializationInProgress = true;
            ClientModule = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/JSWidgetsRCL/DevExtremeComponents/DevExtremeHtmlEditor.razor.js");
            ClientHtmlEditor = await ClientModule.InvokeAsync<IJSObjectReference>("initializeHtmlEditor", HtmlEditor, Toolbar, HtmlString);
            ClientInitializationInProgress = false;
        }
    }

    protected override async Task OnParametersSetAsync() {
        if(ClientHtmlEditor != null) {
            await ClientHtmlEditor.InvokeVoidAsync("option", "value", HtmlString);
        }
    }

    async Task OnHtmlChanged(HtmlEditorHtmlChangedEventArgs args) {
        if(args.HtmlString != HtmlString)
            await HtmlStringChanged.InvokeAsync(args.HtmlString);
    }
    async ValueTask IAsyncDisposable.DisposeAsync() {
        if(ClientHtmlEditor != null)
            await ClientHtmlEditor.DisposeAsync();
        if(ClientModule != null)
            await ClientModule.DisposeAsync();
    }
}
